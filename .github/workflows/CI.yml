---
name: CI - Kinetic
# yamllint disable-line rule:truthy
on:
  [push]

jobs:
  Kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Free up disk space for the CI
        uses: AdityaGarg8/remove-unwanted-software@v1
        with:
          remove-android: 'true'
          remove-dotnet: 'true'
          remove-haskell: 'false'

      - uses: actions/checkout@v3

      - name: Build kernel with internal SSD removed
        run: |
          VERSION=$(grep ^KERNEL_VERSION build.sh | head -n1| cut -d = -f2)
          REL=$(grep "PKGREL=\d*" build.sh | cut -d = -f2)
          echo "kerneltag=${VERSION}-${REL}" >> $GITHUB_ENV

          DOCKER_IMAGE=ubuntu:22.10
          docker pull ${DOCKER_IMAGE}
          docker run \
          -t \
          -v "$(pwd)":/repo \
          ${DOCKER_IMAGE} \
          /bin/bash -c "cd /repo && \
          apt-get update && \
          apt-get install -y lsb-release git wget && \
          mkdir /tmp/artifacts && \
          git clone https://github.com/t2linux/T2-Ubuntu-Kernel.git && \
          sed -i "s/CODENAME=.*/CODENAME=external/g" /repo/T2-Ubuntu-Kernel/build.sh && cd /repo/T2-Ubuntu-Kernel && \
          cd /repo/T2-Ubuntu-Kernel/patches && \
          wget https://github.com/AdityaGarg8/T2-Ubuntu/raw/ssd/ssd.patch && \
          cd /repo/T2-Ubuntu-Kernel && \
          ./build.sh && mkdir /repo/debs && \
          rm /tmp/artifacts/*dbg* && \
          rm /tmp/artifacts/*libc-dev* && \
          cp -r /tmp/artifacts/* /repo/debs"
          mkdir /tmp/artifacts
          cp -r "$(pwd)"/debs/* /tmp/artifacts

      - name: Upload package artifact
        uses: actions/upload-artifact@v2
        with:
          name: kernel-${{ env.kerneltag }}-kinetic
          path: /tmp/artifacts/*

      - name: Release
        if: github.ref == 'refs/heads/kinetic'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            /tmp/artifacts/*.deb
          tag_name: v${{ env.kerneltag }}-kernel-kinetic
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Safe-graphics:
    needs: [Kernel]
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout Kinetic Repo'
        uses: actions/checkout@v3

      - name: Get version
        run: |
         VERSION=$(grep ^KERNEL_VERSION build.sh | head -n1| cut -d = -f2)
         REL=$(grep "PKGREL=\d*" build.sh | cut -d = -f2)
         echo "ver=${VERSION}" >> $GITHUB_ENV
         echo "release=${REL}" >> $GITHUB_ENV
          
      - name: 'Checkout kinetic-16,4 Repo'
        uses: actions/checkout@v3
        with:
          ref: kinetic-16,4
          persist-credentials: false

      - name: 'Push new version to kinetic-16,4'
        id: publish
        run: |
         sed -i "s/KERNEL_VERSION=6.*/KERNEL_VERSION=${{ env.ver }}/g" build.sh
         sed -i "s/PKGREL=.*/PKGREL=${{ env.release }}/g" build.sh
         git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
         git config --local user.name "github-actions[bot]"
         git commit -m "${{ env.ver }}-${{ env.release }}" -a
      - name: Push changes to the repo
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT }}
          branch: kinetic-16,4

  ISO:
    needs: [Kernel]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Build
        run: sudo ./build_in_docker.sh

      - name: print sha256sum
        run: cat output/sha256

      - name: Generate Tag
        id: tag
        run: |
          VER=$(egrep ^KERNEL_VERSION build.sh|cut -d= -f2)
          REL=$(grep "PKGREL=\d*" build.sh | cut -d = -f2)
          echo Version is $VER
          echo "isotag=${VER}-${REL}" >> $GITHUB_ENV

      - name: Upload iso artifact
        uses: actions/upload-artifact@v2
        with:
          name: mbp-ubuntu-${{ steps.tag.outputs.tag }}.z01
          path: ${{ github.workspace }}/output/*

      - name: Instructions for putting it back together
        run: |
          cat << EOF
          Download all the artifacts, and put them in a folder
          without other files. Then run:"
          unzip "*.z??.zip"
          cat livecd-${{ env.isotag }}-t2.z?? > cd.zip
          echo unzip cd.zip
          EOF

      - name: Release
        if: github.ref == 'refs/heads/kinetic'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ github.workspace }}/*.iso
          tag_name: v${{ env.isotag }}
          body_path: ${{ github.workspace }}/.github/workflows/instructions.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete kernel from releases
        if: github.ref == 'refs/heads/kinetic'
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: v${{ env.isotag }}-kernel-kinetic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
